cmake_minimum_required(VERSION 3.11 FATAL_ERROR)

project(hice VERSION 0.5.0 LANGUAGES CXX C)

include(CMakePrintHelpers)

# set openmp and vectorization
if(CMAKE_COMPILER_IS_GNUCXX)
    set(CMAKE_CXX_FLAGS "-fopenmp ${CMAKE_CXX_FLAGS}")
    set(CMAKE_CXX_FLAGS "-mavx -mavx2 -mfma ${CMAKE_CXX_FLAGS}")
    # set(CMAKE_CXX_FLAGS "-Wreturn-type ${CMAKE_CXX_FLAGS}")
    # set(CMAKE_CXX_FLAGS "-Wcomment ${CMAKE_CXX_FLAGS}")
    # set(CMAKE_CXX_FLAGS "-march=native ${CMAKE_CXX_FLAGS}")
    message(STATUS "Optional: ${CMAKE_CXX_FLAGS}")   
endif(CMAKE_COMPILER_IS_GNUCXX)

##############################################
# Genernal setup
##############################################
# https://blog.kitware.com/cmake-and-the-default-build-type

# [NOTE ABOUT LOG]: 
# hice has try-catch mechainism around every C interface but NOT in C++ interface.
#
# In 'Debug' mode, info generated by logging and checking are visible in stdout/stderr.
# hice will shutdown and abort when fatal error occurs.
#
# In other modes, infos are invisible, but hice will throw an exception(not shutdown 
# immediately) when fatal error occurs. There is no need for users to handle these 
# exceptions when hice is called through C interface.

#set(default_build_type "Release")
set(default_build_type "Debug")
if(NOT CMAKE_BUILD_TYPE AND NOT CMAKE_CONFIGURATION_TYPES)
  message(STATUS "Setting build type to '${default_build_type}' as none was specified.")
  set(CMAKE_BUILD_TYPE "${default_build_type}" CACHE
    STRING "Choose the type of build." FORCE)
  # Set the possible values of build type for cmake-gui
  set_property(CACHE CMAKE_BUILD_TYPE PROPERTY STRINGS
    "Debug" "Release" "MinSizeRel" "RelWithDebInfo")
endif()

if(NOT DEFINED CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
  set(CMAKE_CXX_EXTENSIONS OFF)
  set(CMAKE_CXX_STANDARD_REQUIRED ON)
endif()

set(CMAKE_VERBOSE_MAKEFILE OFF)
set(CMAKE_COLOR_MAKEFILE   ON)

set(HICE_ROOT_DIR ${CMAKE_CURRENT_SOURCE_DIR})
set(HICE_CMAKE_DIR ${CMAKE_CURRENT_SOURCE_DIR}/cmake)
set(HICE_EXTERNAL_DIR ${HICE_ROOT_DIR}/third_party)

list(APPEND CMAKE_MODULE_PATH ${HICE_CMAKE_DIR}/module)

#set(CMAKE_INSTALL_PREFIX "~/hice-install" CACHE PATH "" FORCE)
message(STATUS "HICE will be installed to ${CMAKE_INSTALL_PREFIX}")

include(GNUInstallDirs)
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_LIBDIR})
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${PROJECT_BINARY_DIR}/${CMAKE_INSTALL_BINDIR})
# Offer the user the choice of overriding the installation directories
set(INSTALL_INCLUDEDIR "${CMAKE_INSTALL_INCLUDEDIR}/hice" CACHE PATH "Installation directory for header files")
set(INSTALL_LIBDIR ${CMAKE_INSTALL_LIBDIR} CACHE PATH "Installation directory for libraries")
set(INSTALL_CMAKEDIR "${CMAKE_INSTALL_LIBDIR}/cmake/hice-${PROJECT_VERSION}" CACHE PATH "Installation directory for CMake files")
set(INSTALL_BINDIR ${CMAKE_INSTALL_BINDIR} CACHE PATH "Installation directory for executables")

# Report to user
foreach(p LIB BIN INCLUDE CMAKE)
  file(TO_NATIVE_PATH ${CMAKE_INSTALL_PREFIX}/${INSTALL_${p}DIR} _path)
  message(STATUS "Installing ${p} to ${_path}")
  unset(_path)
endforeach()

#set(STAGED_INSTALL_PREFIX ${PROJECT_BINARY_DIR}/staged)
#message(STATUS "Project staged install prefix: ${STAGED_INSTALL_PREFIX}")

include(cmake/public/Utils.cmake)
unset(CMAKE_INSTALL_RPATH)

##############################################
# HICE options
#   HICE_USE_XXX_LOCAL=ON : download xxx to local from internet, 
#   HICE_USE_XXX_LOCAL=OFF: use pre-installed lib by find_package(XXX).
##############################################
hice_option(HICE_BUILD_SHARED_LIBS "Compiled as a shared library" ON)
hice_option(HICE_BUILD_TESTING "Build with testing enabled" ON)
hice_option(HICE_USE_TVM "Build with TVM support" OFF) # support gemm for test
hice_option(HICE_USE_CUDA "Build with CUDA support" OFF)
hice_option(HICE_USE_CUDNN "Build with CUDNN support" OFF "HICE_USE_CUDA" OFF)
hice_option(HICE_STATIC_LINK_CUDA "Statically link CUDA libraries" OFF)
hice_option(HICE_USE_MKL "Build with MKL support" ON)
hice_option(HICE_USE_MKLDNN "Build with MKLDNN support" ON)
hice_option(HICE_USE_MKLDNN_LOCAL "Download and build with MKLDNN" ON  "HICE_USE_MKLDNN" ON)
hice_option(HICE_USE_ABSEIL "Download and build with Abseil" ON)
hice_option(HICE_USE_ABSEIL_LOCAL "Download and build with Abseil" ON "HICE_USE_ABSEIL" OFF)
hice_option(HICE_USE_GTEST_LOCAL "Download and build with GTest" ON)
hice_option(HICE_USE_SLEEF_LOCAL "Download and build with Sleef" ON)
hice_option(HICE_USE_EIGEN_LOCAL "Download and build with Eigen" OFF)
#hice_option(HICE_USE_LAPACK "Build with LAPACK support" OFF)
#hice_option(HICE_USE_LAPACK_LOCAL "Download and build with LAPACK" ON "HICE_USE_LAPACK" OFF)

##############################################
# HICE dependencies
##############################################
set(CMAKE_POSITION_INDEPENDENT_CODE TRUE)
# set(TVM_ROOT_DIR /gpfs/share/home/1600011337/likesen/tvm CACHE PATH "Folder contains TVM" FORCE)
# set(CUDNN_ROOT_DIR /gpfs/share/software/cudnn/10.1-v7.5.0 CACHE PATH "Folder contains NVIDIA cuDNN" FORCE)
#set(CUDNN_ROOT_DIR /gpfs/share/software/cudnn-8.0-v6.0 CACHE PATH "Folder contains NVIDIA cuDNN" FORCE)
#set(CUDNN_ROOT_DIR /usr/local/cuda CACHE PATH "Folder contains NVIDIA cuDNN" FORCE)

# set(MKL_ROOT_DIR /gpfs/share/home/1600011337/.conda/envs/hice-base
#    CACHE PATH "Folder contains Intel MKL" FORCE)
#set(MKL_ROOT_DIR /gpfs/share/software/intel/compilers_and_libraries_2017.1.132/linux/mkl
#    CACHE PATH "Folder contains Intel MKL" FORCE)

#set(MKLDNN_ROOT_DIR "xxxx"
#    CACHE PATH "Folder contains Intel MKLDNN" FORCE)

#set(GTEST_ROOT_DIR "xxxx"
#    CACHE PATH "Folder contains GTest" FORCE)

if(HICE_BUILD_SHARED_LIBS)
  set(BUILD_SHARED_LIBS ON CACHE INTERNAL "")
endif()

if(HICE_USE_ABSEIL)
  if(HICE_USE_ABSEIL_LOCAL)
    include(cmake/local/Abseil.cmake)
  else()
    include(cmake/public/Abseil.cmake)
  endif()
  list(APPEND hice_public_dependency_libs hice::absl) 
endif()

if(HICE_USE_SLEEF_LOCAL)
  list(APPEND hice_public_dependency_libs hice::sleef) 
  include(cmake/local/Sleef.cmake)
endif()

set(HICE_USE_BLAS "MKL" CACHE STRING "Selected BLAS library")
set_property(CACHE HICE_USE_BLAS PROPERTY STRINGS "Eigen;MKL")
if(HICE_USE_BLAS STREQUAL "Eigen")
  if(HICE_USE_EIGEN_LOCAL)
    include(cmake/local/Eigen.cmake)
  else()
    include(cmake/public/Eigen.cmake)
  endif()
  list(APPEND hice_public_dependency_libs hice::eigen)
  list(APPEND hice_public_dependency_flags HICE_USE_EIGEN)
elseif(HICE_USE_BLAS STREQUAL "MKL")
  include(cmake/public/MKL.cmake)
  list(APPEND hice_public_dependency_libs hice::mkl)
else()
  message(FATAL_ERROR "HICE: Unrecognized BLAS option: " ${HICE_USE_BLAS})
endif()

if(HICE_USE_TVM)
  include(cmake/public/TVM.cmake)
  include(cmake/public/Python.cmake)
  list(APPEND hice_public_dependency_libs hice::tvm)
  list(APPEND hice_public_dependency_libs hice::python)
  list(APPEND hice_public_dependency_flags HICE_USE_TVM) 
endif()

if(HICE_USE_CUDA)
  include(cmake/public/CUDA.cmake)
  list(APPEND hice_public_dependency_libs hice::cudart hice::cublas
       hice::cusparse hice::thrust hice::curand)
  list(APPEND hice_public_dependency_flags HICE_USE_CUDA) 
endif()

if(HICE_USE_CUDNN)
  include(cmake/public/CUDNN.cmake)
  list(INSERT hice_public_dependency_libs 0 hice::cudnn)
  list(APPEND hice_public_dependency_flags HICE_USE_CUDNN) 
endif()

if(HICE_USE_MKL)
  include(cmake/public/MKL.cmake)
  list(APPEND hice_public_dependency_libs hice::mkl)
  list(APPEND hice_public_dependency_flags HICE_USE_MKL) 
endif()

if(HICE_USE_MKLDNN)
  set(DNNL_CONFIGURATION  cpu_iomp)
  find_package(dnnl CONFIG REQUIRED)

  list(APPEND hice_public_dependency_libs DNNL::dnnl)
  list(APPEND hice_public_dependency_flags HICE_USE_MKLDNN)
endif()

if(HICE_USE_LAPACK)
  if(HICE_USE_LAPACK_LOCAL)
    include(cmake/local/LAPACK.cmake)
  else()
    include(cmake/public/LAPACK.cmake)
  endif()
  list(APPEND hice_public_dependency_libs hice::lapack)
  list(APPEND hice_public_dependency_flags HICE_USE_LAPACK) 
endif()

if(NOT HICE_USE_MKL AND NOT HICE_USE_MKLDNN)
  list(APPEND hice_public_dependency_flags HICE_USE_CPU_NATIVE) 
endif()

#if(NOT HICE_USE_CUDNN)
#  list(APPEND hice_public_dependency_flags HICE_USE_CUDA_NATIVE)
#endif()

##############################################
# Create target and set properties
##############################################

file(GLOB_RECURSE hice_srcs "hice/*.cpp" "hice/*.cu")

if(NOT HICE_USE_MKL)
  file(GLOB_RECURSE mkl_srcs "hice/*_mkl.cpp" )
  exclude(hice_srcs "${hice_srcs}" ${mkl_srcs})
endif()

if(NOT HICE_USE_MKLDNN)
  file(GLOB_RECURSE mkldnn_srcs "hice/*_mkldnn.cpp" )
  exclude(hice_srcs "${hice_srcs}" ${mkldnn_srcs})
endif()

if(NOT HICE_USE_CUDA)
  file(GLOB_RECURSE cuda_srcs "hice/*_cuda.cpp" "hice/*.cu")
  exclude(hice_srcs "${hice_srcs}" ${cuda_srcs})
endif()

if(NOT HICE_USE_CUDNN)
  file(GLOB_RECURSE cudnn_srcs "hice/*_cudnn.cu" "hice/*_cudnn.h")
  exclude(hice_srcs "${hice_srcs}" ${cudnn_srcs})
endif()

if(NOT HICE_USE_TVM)
  file(GLOB_RECURSE tvm_srcs "hice/tvm/*.cpp" )
  exclude(hice_srcs "${hice_srcs}" ${tvm_srcs})
  file(GLOB_RECURSE intelligent_srcs "hice/intelligent/*.cpp" )
  exclude(hice_srcs "${hice_srcs}" ${intelligent_srcs})
endif()

if(FALSE)
  message(STATUS "HICE sources: ")
  foreach(tmp ${hice_srcs})
    message(STATUS "  " ${tmp})
  endforeach()
endif()

if(BUILD_SHARED_LIBS)
  add_library(hice SHARED ${hice_srcs})
  set_target_properties(hice
    PROPERTIES
      OUTPUT_NAME "hice"
      SOVERSION ${PROJECT_VERSION_MAJOR}
      CXX_VISIBILITY_PRESET "hidden"
      VISIBILITY_INLINES_HIDDEN ON
  )
  target_compile_definitions(hice
    PRIVATE
      HICE_SHARED_LIBS
      HICE_SHARED_LIBS_EXPORTS
  )
  set_target_properties(hice PROPERTIES
    INTERFACE_POSITION_INDEPENDENT_CODE ON)
else()
  add_library(hice STATIC ${hice_srcs})
endif()

target_include_directories(hice
  INTERFACE $<INSTALL_INTERFACE:${CMAKE_INSTALL_INCLUDEDIR}>
  PUBLIC $<BUILD_INTERFACE:${CMAKE_CURRENT_SOURCE_DIR}>)

target_compile_definitions(hice PUBLIC ${hice_public_dependency_flags})

if(HICE_USE_CUDA)
  set_target_properties(hice PROPERTIES CUDA_SEPERABLE_COMPILATION ON)
endif()

target_link_libraries(hice PUBLIC ${hice_public_dependency_libs})
hice_make_interface_library(hice hice_interface)
add_library(hice::hice ALIAS hice_interface)

##############################################
# Testing
##############################################

if(HICE_BUILD_TESTING)
  enable_testing()
  if(HICE_USE_GTEST_LOCAL)
    include(cmake/local/GTest.cmake)
  else()
    include(cmake/public/GTest.cmake)
  endif()
  add_subdirectory(test)
endif()

###############################################
## Installation
###############################################
# CMAKE_INSTALL_RPATH used by Dragon
list(APPEND HICE_INSTALL_RPATH ${CMAKE_INSTALL_PREFIX}/${INSTALL_LIBDIR})
if(HICE_USE_MKL)
  foreach(lib ${MKL_LIBRARIES})
    get_filename_component(dir ${lib} DIRECTORY)
    list(APPEND mkl_libraries_dir ${dir}) 
  endforeach()
  list(APPEND HICE_INSTALL_RPATH ${mkl_libraries_dir})
endif()
if(HICE_USE_TVM)
  list(APPEND HICE_INSTALL_RPATH ${TVM_LIBRARIES_DIRS})
endif()
get_directory_property(has_parent PARENT_DIRECTORY)
if(has_parent)
  set(HICE_INSTALL_RPATH ${HICE_INSTALL_RPATH} PARENT_SCOPE)
endif()

# install HICE targets
install(TARGETS hice
  EXPORT hice_targets
  LIBRARY DESTINATION ${INSTALL_LIBDIR}
  ARCHIVE DESTINATION ${INSTALL_LIBDIR}
  RUNTIME DESTINATION ${INSTALL_BINDIR}
)

# install exported HICE targets
install(EXPORT hice_targets
  FILE HICETargets.cmake
  DESTINATION ${INSTALL_CMAKEDIR}
  EXPORT_LINK_INTERFACE_LIBRARIES
)

# install HICE header files
# NB: Trailing '/' is significant. 
# (https://stackoverflow.com/questions/11096471/how-can-i-install-a-hierarchy-of-files-using-cmake)
install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/hice/
        DESTINATION ${INSTALL_INCLUDEDIR}
        FILES_MATCHING REGEX ".*\\.h$|.*\\.hpp$|.*\\.cuh$"
)

install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/cmake/public/
        DESTINATION ${INSTALL_CMAKEDIR}/public
        FILES_MATCHING PATTERN "*.cmake"
)

install(DIRECTORY ${CMAKE_CURRENT_SOURCE_DIR}/cmake/module/
        DESTINATION ${INSTALL_CMAKEDIR}/module
        FILES_MATCHING PATTERN "*.cmake"
)

include(CMakePackageConfigHelpers)
# Create a Config.cmake file
configure_package_config_file(
  ${HICE_ROOT_DIR}/cmake/template/HICEConfig.cmake.in
  ${CMAKE_CURRENT_BINARY_DIR}/HICEConfig.cmake
  INSTALL_DESTINATION ${INSTALL_CMAKEDIR}
  PATH_VARS CMAKE_INSTALL_PREFIX INSTALL_INCLUDEDIR INSTALL_CMAKEDIR 
)

# Create a ConfigVersion.cmake file
write_basic_package_version_file(
  ${CMAKE_CURRENT_BINARY_DIR}/HICEConfigVersion.cmake
  VERSION ${PROJECT_VERSION}
  COMPATIBILITY AnyNewerVersion
)

# Install both config and version files
install(FILES
  ${CMAKE_CURRENT_BINARY_DIR}/HICEConfig.cmake
  ${CMAKE_CURRENT_BINARY_DIR}/HICEConfigVersion.cmake
  DESTINATION ${INSTALL_CMAKEDIR}
)

if(HICE_USE_BLAS STREQUAL "Eigen")
  install(DIRECTORY ${HICE_EXTERNAL_DIR}/eigen/eigen-src/Eigen
          DESTINATION ${CMAKE_INSTALL_INCLUDEDIR} MESSAGE_NEVER)
endif()

# include(CMakePrintHelpers)
# cmake_print_variables(HICE_EXTERNAL_DIR)
# message(STATUS " " ${HICE_EXTERNAL_DIR}/absl/absl-src/absl)


###############################################
# Exporting from the build tree for use by outside projects.
##############################################
#export(EXPORT hice_targets
#  FILE ${CMAKE_CURRENT_BINARY_DIR}/HICETargets.cmake
#  NAMESPACE hice::
#)

# Configuration summary
#include(cmake/Summary.cmake)
#hice_print_configuration_summary()
#
